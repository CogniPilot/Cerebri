#!/usr/bin/env python3
"""
@author: Benjamin Perseghetti
@email: bperseghetti@rudislabs.com
"""
import jinja2
import os
import numpy as np
import argparse
import xmltodict
from pathlib import Path

cerebriPath = Path(__file__).parents[1]
cogniPilotPath = cerebriPath.parents[0]
hcdfPath = cogniPilotPath / "hcdformat" / "vehicles"

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--hcdf', default='x500.hcdf', help='hardware configuration description file name in config folder')
    parser.add_argument('--absolute', action='store_true')
    parser.add_argument('--clean', action='store_true')

    args = parser.parse_args()

    if args.absolute:
        fileHCDF = Path(args.hcdf).resolve()
    else:
        fileHCDF = hcdfPath / args.hcdf

    with open(fileHCDF) as fd:
        config = xmltodict.parse(fd.read(), process_namespaces=True)
    vehicle = config['hcdf']['vehicle']

    env = jinja2.Environment(loader=jinja2.FileSystemLoader(cerebriPath))

    if vehicle['type'] == "rover" or vehicle['type'] == "multicopter":
        fileGenList=[
            "modules/sim_gz/src/sim_gz_driver.cc.jinja",
            f"modules/{vehicle['type']}_control/src/mixer.c.jinja",
            f"modules/{vehicle['type']}_control/src/parameters.h.jinja"]
    else:
        print(f"vehicle['type']: '{vehicle['type']}' does not match rover or multicopter.")
        print("Please check your HCDF for validity! Exiting.")
        exit(1)


    for file in fileGenList:

        filePath = cerebriPath / file

        if os.path.isfile(filePath):
            template = env.get_template(file)

            result = template.render(vehicle)

            filenameOut = filePath.with_suffix('')
            
            if (not filenameOut.is_file() or args.clean):
                with open(filenameOut, 'w') as f_out:
                    print(f"{file} -> {filenameOut}")
                    f_out.write(result)
            else:
                tmpFilenameOut = f"{filenameOut}.tmp"
                print(f"{filenameOut} already exists writing to: {tmpFilenameOut}")
                with open(tmpFilenameOut, 'w') as f_out:
                    print(f"{filePath} -> {tmpFilenameOut}")
                    f_out.write(result)
        else:
            print(f"{filePath} does not exist!!!")
